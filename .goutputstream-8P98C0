#!/usr/bin/python3
""" Renova livros da biblioteca da UFRJ através do portal 'https://minerva.ufrj.br'.
"""
import argparse as ap

import urllib.request as url
from urllib.parse import urlencode, quote_plus

import sys

from random import random

ARGC = len(sys.argv)
ARGV = sys.argv

def follow_link(link, key, sep):
    "___READ___"
    answer = url.urlopen(link);
    source = str(answer.read());
    data   = source.split(r'\n');

    "____SEEK____"
    new_link = str();
    for line in data:
        if key in line:
            new_link = line.split(sep)[1];
            break;
        else:
            continue;
    assert new_link;

    return new_link;
        
def renew(usr, psw):
    "___SCRIPT___"
    URL         = "http://minerva.ufrj.br";
    SESSION_KEY = int(random()*(10**9));

    FORM        = urlencode({'func'            :'login-session',
                             'bor_id'          : usr,
                             'bor_verification': psw,
                             'bor_library'     :'UFR50',
                             'x'               :'0',
                             'y'               :'0'}, quote_via = quote_plus);

    KEYS        =  [('LOGIN-PAGE', '"'),
                    ('action="', '"'),
                    ('func=bor-info','"'),
                    ('func=bor-loan',"'"),
                    ('func=bor-renew-all&adm_library',"'"),
                    ('func=file&file_name=logout',"'"),
                    ('func=logout','"')];

    LINKS       = ["{}/F?RN={}".format(URL, SESSION_KEY)];
    
    for KEY, SEP in KEYS[:2]:
        LINKS.append(HyperLink(LINKS[-1], KEY, SEP));

    LINKS.append("{}?{}".format(LINKS[-1], FORM));

    for KEY,SEP in KEYS[2:]:
        LINKS.append(HyperLink(LINKS[-1], KEY, SEP));

    return 0;

def main(usr, pswd):
    try:
        renew(usr, pswd)
    except:
        print("Renew failure for {}".format(usr))


def renew_all():
    with open('minerva.cache') as file:
        for line in file:
            line = line.strip()
            usr, psw = line.split("&")
            try:
                main(usr, psw)
                print("Renewed {}".format(usr))

def cache(usr, psw):
    with open('minerva.cache', 'a+') as file:
        buffer = "{}&{}\n".format(usr, psw)
        
        file.seek(0)
        text = file.read()

        if buffer not in text:
            file.write(buffer)
            print("Cached {}".format(usr))
    
if __name__ == '__main__':

    class RenewAll(argparse.Action):
        def __init__(self, option_strings, dest=argparse.SUPPRESS, default=argparse.SUPPRESS, help=None):
            super(RenewAll, self).__init__(option_strings=option_strings, dest=dest, default=default, nargs=0, help=help)

        def __call__(self, parser, namespace, values, option_string=None):
            renew_all()
            parser.exit()

    parser = ap.ArgumentParser(description=__doc__)

    ## username
    user_help = "Nome de usuário."
    parser.add_argument('user', type=str, help=user_help)
    ## password
    pswd_help = "Senha."
    parser.add_argument('pswd', type=str, help=pswd_help)

    ##cache
    cache_help = "Salva as credenciais."
    parser.add_argument('-c', '--cache', action='store_true', help=cache_help)

    ##renew-all
    renew_all_help = "Renova os livros de todas as credenciais salvas."
    parser.add_argument('-r', '--renew-all', action=RenewAll, help=renew_all_help)
    
    args = parser.parse_args()

    sys.exit(1)
		
    
